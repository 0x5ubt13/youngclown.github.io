<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>젊은광대 기술블로그</title>
    <link>https://youngclown.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>잘정리하자</description>
    <pubDate>Tue, 26 Mar 2019 16:27:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>OpenAPI_001</title>
      <link>https://youngclown.github.io/2019/03/2019-03-14-exchangeJSON/</link>
      <guid>https://youngclown.github.io/2019/03/2019-03-14-exchangeJSON/</guid>
      <pubDate>Tue, 26 Mar 2019 16:21:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;한국수출입은행에서, 현재 환율을 실시간으로 제공합니다.  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.koreaexim.go.kr/site/program/financial/exchangeJSON?data=AP01&amp;amp;authkey=xx
        
      
      </description>
      
      <content:encoded><![CDATA[<p>한국수출입은행에서, 현재 환율을 실시간으로 제공합니다.  </p><p><a href="https://www.koreaexim.go.kr/site/program/financial/exchangeJSON?data=AP01&amp;authkey=xxxxxxx&amp;searchdate=20190314" rel="external nofollow noopener noreferrer" target="_blank">https://www.koreaexim.go.kr/site/program/financial/exchangeJSON?data=AP01&amp;authkey=xxxxxxx&amp;searchdate=20190314</a></p><p>인증키를 발급받아 요청을 할 경우, 해당 환율이 나오게 됩니다.<br>테스트 시 나오는 결과값입니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;AED&quot;,&quot;ttb&quot;:&quot;305.77&quot;,&quot;tts&quot;:&quot;311.94&quot;,&quot;deal_bas_r&quot;:&quot;308.86&quot;,&quot;bkpr&quot;:&quot;308&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;308&quot;,&quot;kftc_deal_bas_r&quot;:&quot;308.86&quot;,&quot;cur_nm&quot;:&quot;아랍에미리트 디르함&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;AUD&quot;,&quot;ttb&quot;:&quot;794.74&quot;,&quot;tts&quot;:&quot;810.79&quot;,&quot;deal_bas_r&quot;:&quot;802.77&quot;,&quot;bkpr&quot;:&quot;802&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;802&quot;,&quot;kftc_deal_bas_r&quot;:&quot;802.77&quot;,&quot;cur_nm&quot;:&quot;호주 달러&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;BHD&quot;,&quot;ttb&quot;:&quot;2,979.02&quot;,&quot;tts&quot;:&quot;3,039.21&quot;,&quot;deal_bas_r&quot;:&quot;3,009.12&quot;,&quot;bkpr&quot;:&quot;3,009&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;3,009&quot;,&quot;kftc_deal_bas_r&quot;:&quot;3,009.12&quot;,&quot;cur_nm&quot;:&quot;바레인 디나르&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;CAD&quot;,&quot;ttb&quot;:&quot;838.57&quot;,&quot;tts&quot;:&quot;855.52&quot;,&quot;deal_bas_r&quot;:&quot;847.05&quot;,&quot;bkpr&quot;:&quot;847&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;847&quot;,&quot;kftc_deal_bas_r&quot;:&quot;847.05&quot;,&quot;cur_nm&quot;:&quot;캐나다 달러&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;CHF&quot;,&quot;ttb&quot;:&quot;1,112.36&quot;,&quot;tts&quot;:&quot;1,134.83&quot;,&quot;deal_bas_r&quot;:&quot;1,123.6&quot;,&quot;bkpr&quot;:&quot;1,123&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;1,123&quot;,&quot;kftc_deal_bas_r&quot;:&quot;1,123.6&quot;,&quot;cur_nm&quot;:&quot;스위스 프랑&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;CNH&quot;,&quot;ttb&quot;:&quot;166.78&quot;,&quot;tts&quot;:&quot;170.15&quot;,&quot;deal_bas_r&quot;:&quot;168.47&quot;,&quot;bkpr&quot;:&quot;168&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;168&quot;,&quot;kftc_deal_bas_r&quot;:&quot;168.47&quot;,&quot;cur_nm&quot;:&quot;위안화&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;DKK&quot;,&quot;ttb&quot;:&quot;169.62&quot;,&quot;tts&quot;:&quot;173.05&quot;,&quot;deal_bas_r&quot;:&quot;171.34&quot;,&quot;bkpr&quot;:&quot;171&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;171&quot;,&quot;kftc_deal_bas_r&quot;:&quot;171.34&quot;,&quot;cur_nm&quot;:&quot;덴마아크 크로네&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;EUR&quot;,&quot;ttb&quot;:&quot;1,265.45&quot;,&quot;tts&quot;:&quot;1,291.02&quot;,&quot;deal_bas_r&quot;:&quot;1,278.24&quot;,&quot;bkpr&quot;:&quot;1,278&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;1,278&quot;,&quot;kftc_deal_bas_r&quot;:&quot;1,278.24&quot;,&quot;cur_nm&quot;:&quot;유로&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;GBP&quot;,&quot;ttb&quot;:&quot;1,488.12&quot;,&quot;tts&quot;:&quot;1,518.19&quot;,&quot;deal_bas_r&quot;:&quot;1,503.16&quot;,&quot;bkpr&quot;:&quot;1,503&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;1,503&quot;,&quot;kftc_deal_bas_r&quot;:&quot;1,503.16&quot;,&quot;cur_nm&quot;:&quot;영국 파운드&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;HKD&quot;,&quot;ttb&quot;:&quot;143.08&quot;,&quot;tts&quot;:&quot;145.97&quot;,&quot;deal_bas_r&quot;:&quot;144.53&quot;,&quot;bkpr&quot;:&quot;144&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;144&quot;,&quot;kftc_deal_bas_r&quot;:&quot;144.53&quot;,&quot;cur_nm&quot;:&quot;홍콩 달러&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;IDR(100)&quot;,&quot;ttb&quot;:&quot;7.86&quot;,&quot;tts&quot;:&quot;8.01&quot;,&quot;deal_bas_r&quot;:&quot;7.94&quot;,&quot;bkpr&quot;:&quot;7&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;7&quot;,&quot;kftc_deal_bas_r&quot;:&quot;7.94&quot;,&quot;cur_nm&quot;:&quot;인도네시아 루피아&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;JPY(100)&quot;,&quot;ttb&quot;:&quot;1,009.25&quot;,&quot;tts&quot;:&quot;1,029.64&quot;,&quot;deal_bas_r&quot;:&quot;1,019.45&quot;,&quot;bkpr&quot;:&quot;1,019&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;1,019&quot;,&quot;kftc_deal_bas_r&quot;:&quot;1,019.45&quot;,&quot;cur_nm&quot;:&quot;일본 옌&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;KRW&quot;,&quot;ttb&quot;:&quot;0&quot;,&quot;tts&quot;:&quot;0&quot;,&quot;deal_bas_r&quot;:&quot;1&quot;,&quot;bkpr&quot;:&quot;1&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;1&quot;,&quot;kftc_deal_bas_r&quot;:&quot;1&quot;,&quot;cur_nm&quot;:&quot;한국 원&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;KWD&quot;,&quot;ttb&quot;:&quot;3,694.95&quot;,&quot;tts&quot;:&quot;3,769.6&quot;,&quot;deal_bas_r&quot;:&quot;3,732.28&quot;,&quot;bkpr&quot;:&quot;3,732&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;3,732&quot;,&quot;kftc_deal_bas_r&quot;:&quot;3,732.28&quot;,&quot;cur_nm&quot;:&quot;쿠웨이트 디나르&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;MYR&quot;,&quot;ttb&quot;:&quot;274.64&quot;,&quot;tts&quot;:&quot;280.19&quot;,&quot;deal_bas_r&quot;:&quot;277.42&quot;,&quot;bkpr&quot;:&quot;277&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;277&quot;,&quot;kftc_deal_bas_r&quot;:&quot;277.42&quot;,&quot;cur_nm&quot;:&quot;말레이지아 링기트&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;NOK&quot;,&quot;ttb&quot;:&quot;129.84&quot;,&quot;tts&quot;:&quot;132.47&quot;,&quot;deal_bas_r&quot;:&quot;131.16&quot;,&quot;bkpr&quot;:&quot;131&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;131&quot;,&quot;kftc_deal_bas_r&quot;:&quot;131.16&quot;,&quot;cur_nm&quot;:&quot;노르웨이 크로네&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;NZD&quot;,&quot;ttb&quot;:&quot;768.01&quot;,&quot;tts&quot;:&quot;783.52&quot;,&quot;deal_bas_r&quot;:&quot;775.77&quot;,&quot;bkpr&quot;:&quot;775&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;775&quot;,&quot;kftc_deal_bas_r&quot;:&quot;775.77&quot;,&quot;cur_nm&quot;:&quot;뉴질랜드 달러&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;SAR&quot;,&quot;ttb&quot;:&quot;299.48&quot;,&quot;tts&quot;:&quot;305.53&quot;,&quot;deal_bas_r&quot;:&quot;302.51&quot;,&quot;bkpr&quot;:&quot;302&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;302&quot;,&quot;kftc_deal_bas_r&quot;:&quot;302.51&quot;,&quot;cur_nm&quot;:&quot;사우디 리얄&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;SEK&quot;,&quot;ttb&quot;:&quot;119.95&quot;,&quot;tts&quot;:&quot;122.38&quot;,&quot;deal_bas_r&quot;:&quot;121.17&quot;,&quot;bkpr&quot;:&quot;121&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;121&quot;,&quot;kftc_deal_bas_r&quot;:&quot;121.17&quot;,&quot;cur_nm&quot;:&quot;스웨덴 크로나&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;SGD&quot;,&quot;ttb&quot;:&quot;827.49&quot;,&quot;tts&quot;:&quot;844.2&quot;,&quot;deal_bas_r&quot;:&quot;835.85&quot;,&quot;bkpr&quot;:&quot;835&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;835&quot;,&quot;kftc_deal_bas_r&quot;:&quot;835.85&quot;,&quot;cur_nm&quot;:&quot;싱가포르 달러&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;THB&quot;,&quot;ttb&quot;:&quot;35.46&quot;,&quot;tts&quot;:&quot;36.17&quot;,&quot;deal_bas_r&quot;:&quot;35.82&quot;,&quot;bkpr&quot;:&quot;35&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;35&quot;,&quot;kftc_deal_bas_r&quot;:&quot;35.82&quot;,&quot;cur_nm&quot;:&quot;태국 바트&quot;&#125;,&#123;&quot;result&quot;:1,&quot;cur_unit&quot;:&quot;USD&quot;,&quot;ttb&quot;:&quot;1,123.15&quot;,&quot;tts&quot;:&quot;1,145.84&quot;,&quot;deal_bas_r&quot;:&quot;1,134.5&quot;,&quot;bkpr&quot;:&quot;1,134&quot;,&quot;yy_efee_r&quot;:&quot;0&quot;,&quot;ten_dd_efee_r&quot;:&quot;0&quot;,&quot;kftc_bkpr&quot;:&quot;1,134&quot;,&quot;kftc_deal_bas_r&quot;:&quot;1,134.5&quot;,&quot;cur_nm&quot;:&quot;미국 달러&quot;&#125;]</span><br></pre></td></tr></table></figure><p>만약 미국 달러가 필요할 경우,</p><p><a href="https://www.koreaexim.go.kr/site/program/financial/exchangeJSON?data=AP01&amp;authkey=xxxx&amp;searchdate=20190312&amp;cur_unit=USD" rel="external nofollow noopener noreferrer" target="_blank">https://www.koreaexim.go.kr/site/program/financial/exchangeJSON?data=AP01&amp;authkey=xxxx&amp;searchdate=20190312&amp;cur_unit=USD</a></p><p>USD를 요청하면됩니다.<br>정확한 스펙문서는,</p><p><a href="https://www.koreaexim.go.kr/site/program/openapi/openApiList?menuid=001003002002001" rel="external nofollow noopener noreferrer" target="_blank">https://www.koreaexim.go.kr/site/program/openapi/openApiList?menuid=001003002002001</a><br>에 정의되어있습니다.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.koreaexim.go.kr/site/program/openapi/openApiView?menuid=001003002002001&amp;apino=2&amp;viewtype=C" rel="external nofollow noopener noreferrer" target="_blank">Open API 제공목록</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2019/03/2019-03-14-exchangeJSON/#disqus_thread</comments>
    </item>
    
    <item>
      <title>assets_Response</title>
      <link>https://youngclown.github.io/2019/03/2019-03-13-assets_Response/</link>
      <guid>https://youngclown.github.io/2019/03/2019-03-13-assets_Response/</guid>
      <pubDate>Wed, 13 Mar 2019 14:17:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Native-Link-object-adm-object&quot;&gt;&lt;a href=&quot;#Native-Link-object-adm-object&quot; class=&quot;headerlink&quot; title=&quot;Native Link object (adm object)&quot;&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Native-Link-object-adm-object"><a href="#Native-Link-object-adm-object" class="headerlink" title="Native Link object (adm object)"></a>Native Link object (adm object)</h2><h2 id="타불라-네이비트-광고의-Response-요청-처리안"><a href="#타불라-네이비트-광고의-Response-요청-처리안" class="headerlink" title="타불라 네이비트 광고의 Response 요청 처리안"></a>타불라 네이비트 광고의 Response 요청 처리안</h2><p>The native ad markup object is the top level JSON object which identifies a native response. Each asset within the asset array corresponds to the Asset Object in the request. The main container object for each asset requested or supported by Exchange on behalf of the rendering client. Out<br>of the six possible assets only title and img are mandatory.<br>The Taboola Open RTB supports this either as a JSON-encoded string, or a formal object.<br>For video, the inline VAST document in the adm attribute constitute the ad markup</p><h2 id="adm-object"><a href="#adm-object" class="headerlink" title="adm object"></a>adm object</h2><p>“link” -&gt; “{“url”:”<a href="https://partneradvertiser.com/url/data/com&quot;,&quot;clicktrackers&quot;:[]}&quot;" rel="external nofollow noopener noreferrer" target="_blank">https://partneradvertiser.com/url/data/com&quot;,&quot;clicktrackers&quot;:[]}&quot;</a></p><p>“imptrackers” -&gt; “[“<a href="http://partnerimptrackerurl.com/imp/trackers/{AUCTION_PRICE}&quot;]&quot;" rel="external nofollow noopener noreferrer" target="_blank">http://partnerimptrackerurl.com/imp/trackers/{AUCTION_PRICE}&quot;]&quot;</a></p><p>assets : List of native ad’s assets<br>link : Destination Link. This is the link object for the ad.<br>imptrackers : Array of impression tracking URLs, expected to return a<br>1x1 image or 204 response</p><pre><code>- This is one of the possible means for conveying win notifications to the exchange partner. Taboola Open RTB Exchange will replace macros defined within the URL as specified under table 4.2.5 in this specification, or with an empty string if unavailable. Up to 4 tracking URLs will be allowed. The impression tracker is limited to 3000 characters</code></pre><h2 id="Native-Link-object"><a href="#Native-Link-object" class="headerlink" title="Native Link object"></a>Native Link object</h2><p>URL : Landing URL of the clickable link.<br>clicktrackers : List of third-party tracker URLs to be fired on click of the URL.</p><pre><code>- Taboola Open RTB Exchange will replace macros defined within the URL as specified under table 4.2.5 in this specification, or with an empty string if unavailable. Up to 3 tracking URLs will be allowed. If more than three exist, only the first 3 will be fired.</code></pre><blockquote><p>landing url 에 대한 유효 클릭에 대한 대응 처리에 대한 방안이 고려되어야함.</p></blockquote><h2 id="Native-asset-object-title"><a href="#Native-asset-object-title" class="headerlink" title="Native asset object - title"></a>Native asset object - title</h2><p>{“id”:1,”title”:{“text”:”Some site title - Some site titile”},”img”:null,”data”:null,”video”:null}</p><p>id : the asset IDs in request</p><pre><code>- 1</code></pre><p>title : Contains a single (string typed) field, named ‘text’ which contains the text associated with the title element</p><pre><code>- 40 characters, after which “...” are added</code></pre><h2 id="Native-asset-object-img"><a href="#Native-asset-object-img" class="headerlink" title="Native asset object - img"></a>Native asset object - img</h2><p>{“id”:2,”title”:null,”img”:{“url”:”<a href="http://somesitename.com/images/img.jpg&quot;,&quot;w&quot;:600,&quot;h&quot;:500},&quot;data&quot;:null,&quot;video&quot;:null}" rel="external nofollow noopener noreferrer" target="_blank">http://somesitename.com/images/img.jpg&quot;,&quot;w&quot;:600,&quot;h&quot;:500},&quot;data&quot;:null,&quot;video&quot;:null}</a></p><p>id : the asset IDs in request</p><pre><code>- 2</code></pre><p>img : url : URL of the image asset</p><pre><code>    - The image URL is limited to 1024 charactersw : Optionalh : Optional</code></pre><p>Since the Taboola network’s supply consists of native placements the use of h,w parameters are highly recommended. They allow the Taboola algorithm to optimize the the processing of the source image so that it optimally fits into the (possibly varying) placement dimensions. In some cases, we might also choose to reject the bid, if we suspect that the difference between source and target dimension would inevitably create a bad user experience and low engagement chances, which would be inefficient both for the Publisher hosting that placement and the Taboola exchange partner.</p><h2 id="Native-asset-object-brand-name"><a href="#Native-asset-object-brand-name" class="headerlink" title="Native asset object - brand name"></a>Native asset object - brand name</h2><p>{“id”:3,”title”:null,”img”:null,”data”:{“value”:”Some site name”},”video”:null}</p><p>id : the asset IDs in request</p><pre><code>- 3</code></pre><p>data : Contains a single (string typed) field, named ‘value’ which contains the text associated with the brand name element</p><h2 id="Native-asset-object-description"><a href="#Native-asset-object-description" class="headerlink" title="Native asset object - description"></a>Native asset object - description</h2><p>{“id”:4,”title”:null,”img”:null,”data”:{“value”:”site description and other information provided”},”video”:null}</p><p>id : the asset IDs in request</p><pre><code>- 4</code></pre><p>data : Contains a single (string typed) field, named ‘value’ which contains the text associated with the description element</p><h2 id="Native-asset-object-price"><a href="#Native-asset-object-price" class="headerlink" title="Native asset object - price"></a>Native asset object - price</h2><p>id : the asset IDs in request</p><pre><code>- 5</code></pre><p>data : Contains a single (string typed) field, named ‘value’ which contains the text associated with the price element</p><pre><code>- As stated above, value should include currency symbol in localised format. Limited to 40 characters.</code></pre><h2 id="Native-asset-object-privacy-link"><a href="#Native-asset-object-privacy-link" class="headerlink" title="Native asset object - privacy link"></a>Native asset object - privacy link</h2><p>id : the asset IDs in request</p><pre><code>- 6</code></pre><p>data : Contains a single (string typed) field, named ‘value’ which contains the text to be concatenated to the partner domain. Combined, they create the privacy link URL which will be incorporated in the widget opt-out AdChoices icon</p><h2 id="Native-asset-object-video"><a href="#Native-asset-object-video" class="headerlink" title="Native asset object - video"></a>Native asset object - video</h2><p>vasttag :  vast xml</p><pre><code>- 7</code></pre>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2019/03/2019-03-13-assets_Response/#disqus_thread</comments>
    </item>
    
    <item>
      <title>assets_Request</title>
      <link>https://youngclown.github.io/2019/03/2019-03-13-assets_Request/</link>
      <guid>https://youngclown.github.io/2019/03/2019-03-13-assets_Request/</guid>
      <pubDate>Wed, 13 Mar 2019 13:51:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Native-Ad-Request-Markup-object&quot;&gt;&lt;a href=&quot;#Native-Ad-Request-Markup-object&quot; class=&quot;headerlink&quot; title=&quot;Native Ad Request Markup objec
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Native-Ad-Request-Markup-object"><a href="#Native-Ad-Request-Markup-object" class="headerlink" title="Native Ad Request Markup object"></a>Native Ad Request Markup object</h2><h2 id="타불라-네이비트-광고의-Request-요청-처리안"><a href="#타불라-네이비트-광고의-Request-요청-처리안" class="headerlink" title="타불라 네이비트 광고의 Request 요청 처리안"></a>타불라 네이비트 광고의 Request 요청 처리안</h2><p>The Native Object defines the native advertising opportunity available for bid via this bidrequest.<br>The Taboola Open RTB will supply this as a JSON-encoded string.<br>Every Taboola inventory item will call for six assets to be returned in the response: A title, an image (for the thumbnail), brand name, description, the price of the product and a privacy link.<br>Out of the six only the first two are mandatory, and the others optional.<br>All are described in further details in the following sections.  </p><p>Json 안에 String 화된 Json 이 다시 구현되어있는 구조.</p><h2 id="Asset-object-title"><a href="#Asset-object-title" class="headerlink" title="Asset object - title"></a>Asset object - title</h2><pre><code>- Describes the need for the bid creative to contain a title.</code></pre><p>{“id”:1,”required”:1,”title”:{“len”:1500}}<br>id : Unique asset ID, assigned by exchange. Typically a counter for the array</p><pre><code>- Value will be set to 1</code></pre><p>required : Set to 1 if asset is required (exchange will not accept a bid without it)</p><pre><code>- Value will be set to 1</code></pre><p>title : d Title object - contains a single field defining the maximal allowed length of the title:<br>        Field name: len<br>        Field type: Int</p><pre><code>- Will be set to 90 by default.</code></pre><h2 id="Asset-object-img"><a href="#Asset-object-img" class="headerlink" title="Asset object - img"></a>Asset object - img</h2><ul><li>Describes the need for the bid creative to contain an image, that will serve as the creative’s thumbnail.<br>{“id”:2,”required”:1,”img”:{“type”:3,”wmin”:1,”hmin”:1}}<br>id : Unique asset ID, assigned by exchange. Typically a counter for the array<ul><li>Value will be set to 2<br>required : Set to 1 if asset is required (exchange will not accept a bid without it)</li><li>Value will be set to 1<br>img : img object will contain three (int type) fields:<br>wmin - the minimum requested width of the image in pixels.<br>hmin - the minimum requested height of the image in pixels<br>type - the type ID of the image element supported by the publisher<ul><li>Type value will always be set to 3 (“Large image preview for the ad”)</li></ul></li></ul></li></ul><h2 id="Asset-object-brand-name"><a href="#Asset-object-brand-name" class="headerlink" title="Asset object - brand name"></a>Asset object - brand name</h2><ul><li>Describes the need for the bid creative to contain a branding text. If no brand name will be supplied, the advertiser domain will be used by Taboola instead.<br>{“id”:3,”required”:0,”data”:{“type”:1,”len”:200}}<br>id : Unique asset ID, assigned by exchange. Typically a counter for the array<ul><li>Value will be set to 3<br>required : Set to 1 if asset is required (exchange will not accept a bid without it)</li><li>Value will be set to 0<br>data : data object will contain two<br>fields (of type int):<br>Field name - type<br>Field name - len<ul><li>‘type’ value will always be set to 1, which states ‘Sponsored By message where response should contain the brand name of the sponsor’ len represents the maximal allowed length for the brand name.</li></ul></li></ul></li></ul><h2 id="Asset-object-description"><a href="#Asset-object-description" class="headerlink" title="Asset object - description"></a>Asset object - description</h2><p>Describes the need for the bid creative to contain a descriptive text.<br>{“id”:4,”required”:0,”data”:{“type”:2,”len”:15000}}</p><p>id : Unique asset ID, assigned by exchange. Typically a counter for the array</p><pre><code>- Value will be set to 4</code></pre><p>required : Set to 1 if asset is required (exchange will not accept a bid without it)</p><pre><code>- Value will be set to 0</code></pre><p>data : data object will contain two<br>      fields (of type int):<br>      Field name - type<br>      Field name - len</p><pre><code>- ‘type’ value will always be set to 2, which states ‘Descriptive text associated with the product or service being advertised. Longer length of text in response may be truncated or ellipsed by the exchange’ len represents the maximal allowed length for the description.</code></pre><h2 id="Asset-object-price"><a href="#Asset-object-price" class="headerlink" title="Asset object - price"></a>Asset object - price</h2><ul><li>Describes the option for the bid creative to contain a price, in case the bidder is offering a product ad.<br>{“id”:5,”required”:0,”data”:{“type”:6,”len”:60}}</li></ul><p>id : Unique asset ID, assigned by exchange. Typically a counter for the array</p><pre><code>- Value will be set to 5</code></pre><p>required : Set to 1 if asset is required (exchange will not accept a bid without it)</p><pre><code>- Value will be set to 0</code></pre><p>data : data object will contain one field :<br>      Field name - type<br>      Field value - int</p><pre><code>- Value will always be set to 6, which states ‘Price for product / app / in-app purchase. Value should include currency symbol in localized format</code></pre><h2 id="Asset-object-privacy-link"><a href="#Asset-object-privacy-link" class="headerlink" title="Asset object - privacy link"></a>Asset object - privacy link</h2><ul><li>In some cases the bidder might be willing to supply a link to its privacy policy opt out mechanism, as part of the creative. In case this asset is incorporated in the response, the Taboola exchange will use this link as opt-out parameters, which will be concatenated to a domain name agreed upon prior to setting up the RTB integration. The result is what the user will be redirected to when interacting with the Taboola AdChoices icon for that slot. For more details please contact Taboola product team.<br>{“id”:6,”required”:0,”data”:{“type”:500}}</li></ul><p>id : Unique asset ID, assigned by exchange. Typically a counter for the array</p><pre><code>- Value will be set to 6</code></pre><p>required : Set to 1 if asset is required (exchange will not accept a bid without it)</p><pre><code>- Value will be set to 0</code></pre><p>data : data object will contain one field:<br>      Field name - type<br>      Field value - string</p><pre><code>- Value will always be set to 500</code></pre>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2019/03/2019-03-13-assets_Request/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Anonymous</title>
      <link>https://youngclown.github.io/2019/01/2019-01-30-ramdavsanonymous/</link>
      <guid>https://youngclown.github.io/2019/01/2019-01-30-ramdavsanonymous/</guid>
      <pubDate>Wed, 30 Jan 2019 07:32:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;람다-vs-익명클래스-성능-확인&quot;&gt;&lt;a href=&quot;#람다-vs-익명클래스-성능-확인&quot; class=&quot;headerlink&quot; title=&quot;람다 vs 익명클래스 성능 확인&quot;&gt;&lt;/a&gt;람다 vs 익명클래스 성능 확인&lt;/h2&gt;&lt;figure class
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="람다-vs-익명클래스-성능-확인"><a href="#람다-vs-익명클래스-성능-확인" class="headerlink" title="람다 vs 익명클래스 성능 확인"></a>람다 vs 익명클래스 성능 확인</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.DoubleBinaryOperator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator op;</span><br><span class="line">    Main( DoubleBinaryOperator op) &#123;</span><br><span class="line">        <span class="keyword">this</span>.op = op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Main(<span class="keyword">new</span> DoubleBinaryOperator() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">applyAsDouble</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> x+y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Main((x,y)-&gt;x+y);</span><br><span class="line">        &#125;</span><br><span class="line">         end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>람다를 사용할 경우, 소스는 매우 간단하게 바뀝니다.</p><p>테스트를 위해, DoubleBinaryOperator 클래스를 import 받아 테스트했을 때,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Main((x,y)-&gt;x+y);</span><br></pre></td></tr></table></figure><p>람다는 단 한줄안에 처리되지만,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Main(<span class="keyword">new</span> DoubleBinaryOperator() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">applyAsDouble</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>익명클래스(anonymous class)를 사용하여 생성할 경우에는 상당히 복잡해보입니다.<br>하지만 속도를 확인했을 경우,<br>anonymous class 로 생성해서 돌리는 경우가 람다식을 썻을 때보다 대략 3~8배 가량 빠른 것을 확인할 수 있습니다.<br>꼭 최신 기능이 더 나은 기능이란 것은 아니라고 생각합니다.</p><p>개발자들은 숨겨진 비용에 대해, 명확하게 알고 사용하는 것이 좋을 것이라고 생각합니다.<br>응답시간을 100ms 맞춰야하는 짧은 시간에서,<br>조금이라도 성능을 확인하고 적용하면, 별도의 Util 보다 hardcoding 형태로 바로 적용하는 것이 더 빠를 경우도 있어,<br>상황에 맡게 자신의 기술력을 적용하는 것이 어렵다는 걸 자주 느낍니다.</p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2019/01/2019-01-30-ramdavsanonymous/#disqus_thread</comments>
    </item>
    
    <item>
      <title>netstat -na | grep 720 | grep ESTABLISHED</title>
      <link>https://youngclown.github.io/2019/01/2019-01-03-netstat/</link>
      <guid>https://youngclown.github.io/2019/01/2019-01-03-netstat/</guid>
      <pubDate>Thu, 03 Jan 2019 04:56:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;넷스탯-네트워크-통계&quot;&gt;&lt;a href=&quot;#넷스탯-네트워크-통계&quot; class=&quot;headerlink&quot; title=&quot;넷스탯, 네트워크 통계&quot;&gt;&lt;/a&gt;넷스탯, 네트워크 통계&lt;/h2&gt;&lt;p&gt;외부와의 연결상태를 파악할 수 있습니다.&lt;br&gt;시스템과 연
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="넷스탯-네트워크-통계"><a href="#넷스탯-네트워크-통계" class="headerlink" title="넷스탯, 네트워크 통계"></a>넷스탯, 네트워크 통계</h2><p>외부와의 연결상태를 파악할 수 있습니다.<br>시스템과 연결된 여러가지 세션(session) 정보들을 확인할 수 있습니다.<br>개발자들은 보통 커넥션 풀을 확인하는 용도로 확인합니다.</p><p>SE 라면, 시스템 라우팅 테이블 확인, 네트워크 인터페이스 사용통계 확인, 마스커레이드 연결확인, 멀티케스팅 과 같은 현재 시스템의 네트워크에 관한 다양한 정보확인을 할 수 있는 유용한 네트워크 관리도구라고 합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-a : --all 과 같으며 listen되는 소켓정보와 listen 되지 않는 소켓정보 모두 보여줍니다.</span><br><span class="line">-n : --numeric 과 같으며 10진수의 수치정보로 결과를 출력합니다.</span><br><span class="line">-r : --route 와 같으며 설정된 라우팅정보를 출력합니다.</span><br><span class="line">-p : --program 과 같으며 실행되고 있는 각 프로그램과 PID 정보를 출력합니다.</span><br><span class="line">-i : --interface=iface 와 같으며 모든 네트워크 인터페이스 정보를 출력합니다. 또는 특정 네트워크 인터페이스를 지정할 수도 있습니다.</span><br><span class="line">-c : --continuous 와 같으며 netstat 결과를 연속적으로 출력합니다.</span><br><span class="line">-l : --listening 과 같으며 현재 listen 되고 있는 소켓정보를 출력합니다.</span><br><span class="line">-s : --statistics 와 같으며 각 프로토콜에 대한 통계정보를 출력합니다.</span><br></pre></td></tr></table></figure><p>netstat -rn : route 와 같은 기능합니다.<br>netstat -an : 모든 소켓을 보여줍니다.<br>netstat -atp : 열려진 포트를 사용하고 있는 프로세스를 확인합니다.<br>netstat -s : 각각의 프로토콜의 사용 통계를 확인합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[WAS-03:root]/root&gt;#netstat -na | grep 720 | grep ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:41956            xxx.xxx.xxx.103:7205           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:46042            xxx.xxx.xxx.102:7202           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:40238            xxx.xxx.xxx.102:7206           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:51886            xxx.xxx.xxx.102:7208           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:42588            xxx.xxx.xxx.103:7205           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:44846            xxx.xxx.xxx.103:7207           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:52202            xxx.xxx.xxx.103:7201           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:54546            xxx.xxx.xxx.102:7200           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:54964            xxx.xxx.xxx.102:7200           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:49862            xxx.xxx.xxx.102:7204           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:53268            xxx.xxx.xxx.102:7200           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:43196            xxx.xxx.xxx.103:7207           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:50626            xxx.xxx.xxx.102:7204           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:48736            xxx.xxx.xxx.102:7200           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:50086            xxx.xxx.xxx.102:7208           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:60356            xxx.xxx.xxx.103:7201           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:33794            xxx.xxx.xxx.103:7201           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:41388            xxx.xxx.xxx.102:7206           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:45390            xxx.xxx.xxx.102:7202           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:44728            xxx.xxx.xxx.103:7209           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:37258            xxx.xxx.xxx.102:7202           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:59658            xxx.xxx.xxx.103:7203           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:44726            xxx.xxx.xxx.103:7209           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:42756            xxx.xxx.xxx.103:7209           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:59744            xxx.xxx.xxx.103:7203           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:58458            xxx.xxx.xxx.103:7203           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:42052            xxx.xxx.xxx.102:7206           ESTABLISHED</span><br><span class="line">tcp        0      0 xxx.xxx.xxx.3:42590            xxx.xxx.xxx.103:7205           ESTABLISHED</span><br></pre></td></tr></table></figure><p>netstat -an 를 사용하여 현재 720X 포트를 사용하는 ESTABLISHED된 소켓을 확인할 수 있습니다.</p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2019/01/2019-01-03-netstat/#disqus_thread</comments>
    </item>
    
    <item>
      <title>샤머니즘 TABLE 생성 논리</title>
      <link>https://youngclown.github.io/2018/12/2018-12-17-dbdeeplink/</link>
      <guid>https://youngclown.github.io/2018/12/2018-12-17-dbdeeplink/</guid>
      <pubDate>Mon, 17 Dec 2018 02:04:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;A 테이블과 B 테이블은 서로간 맵핑이 되어야한다고 할때,&lt;br&gt;보통의 개발자들은 맵핑 테이블을 만들게 됩니다.  &lt;/p&gt;
&lt;p&gt;그리고 N:N 구조에서 어느쪽의 데이터가 더 많은 지를 우선 파악해야합니다.&lt;br&gt;N:N 이 실제 2:5의 비율이 될
        
      
      </description>
      
      <content:encoded><![CDATA[<p>A 테이블과 B 테이블은 서로간 맵핑이 되어야한다고 할때,<br>보통의 개발자들은 맵핑 테이블을 만들게 됩니다.  </p><p>그리고 N:N 구조에서 어느쪽의 데이터가 더 많은 지를 우선 파악해야합니다.<br>N:N 이 실제 2:5의 비율이 될지 2:13 의 비율이 될지를 파악해야지, 개발시 맵핑테이블에 등록하는 방법을 기술적으로 더 고민해야합니다.  </p><p>예를 들어,<br>A군에 속한 데이터를 화면에 등록하는 페이지에서는,<br>A군의 데이터가 한개 등록될 때 최대 3만건의 B군의 데이터가 맵핑에 자동으로 등록이 됩니다.<br>B군에 속한 데이터가 화면에서 한개 등록될 떄 A군의 속한 데이터가 8천개 정도 자동으로 맵핑되어 등록됩니다.  </p><p>A군의 유효한 데이터가 8천개<br>B군의 유효한 데이터가 3만개 로 대략적으로 1:4 의 구조를 지니고 있습니다.  </p><p>해당 데이터 B군이 어떠한 사유에 의해 유효한 데이터가 5만건이 늘어나게 된다면,<br>기존 1:4 로 등록되는 구조가 1:8 이상의 구조로 변경되게 됩니다.  </p><p>그렇다면 5만건의 유효한 데이터를 그대로 유지할지, 안할지에 대한 판단이 필요합니다.<br>현재 Auto Increment 가 1048719446 (10억)까지 증가된 상황에서 테이블 용량은 110GB를 차지하고 있는 상황이며,<br>B군이 2.5배가 된다는 것은 직관적으로 20억 및 테이블 용량이 220GB가 된다는 의미와 같습니다.  </p><p>그 상황에서 개발자의 접속권한으로는 전체 row 갯수를 파악하지 못할 정도로 많은 데이터이긴한데,<br>인덱스가 가능한 PK값들을 단독으로 수행했을 때는 0.0016초 정도안에 응답하고 있습니다.<br>해당 데이터를 full scan 하여 검색하는하는 로직이 존재하지 않기 때문에 개발적으로는 이슈될 사항은 없는 상태입니다.  </p><p>그렇다면, 현재 상황에서 기존의 테이블을 그대로 사용해야할 것인지, 분리해서 별도의 테이블을 구축해야할지 결정해야하는데,<br>이 경우, 테이블을 분리할 것인가 하지 말아야할 것인가는 DBA의 판단으로 넘겨야할 거 같습니다.  </p><p>index size 라든가, 얼마만큼 data block 이 깨져있는지 등에 대해서는 개발자로서 접근권한이 없기 때문에 해당 근거자료로는 부족하기 때문입니다.  </p><p>분리한다는 작업은 신규개발 및 일정을 산정하면 될 부분이고,<br>테이블을 분리하여 성능 개선이 된다면, 혹은 기존 개발된 부분에 무리가 가는 부분이 조금이라도 있다면 분리하는 것이 맞습니다.  </p><p>테이블의 수직분할은 컬럼을 기준으로 테이블을 분리하는 것을 의미하고 수평분할은 Row를 기준으로 테이블을 분리하는 것을 의미합니다.  </p><p>개발자로서 개발을 하면서 수직분할 작업은 했지만, 수평분할로 개발한 적은 단 한번도 없긴 하지만,<br>만약 해야한다면 이번이 처음으로 보입니다.  </p><p>기본적으로 수직 분할을 하는 이유는 컬럼이 계속 추가 되면, 테이블의 컬럼 수가 많을수록 I/O에 대한 부하가 걸리고,<br>수평 분할을 하는 이유는 테이블의 Row 수가 많을수록 Index에 대한 부하가 따르기 때문입니다.  </p><p>만약 한 테이블에 수많은 컬럼을 계속 추가하게 되어 존재하게 된다면,<br>디스크의 여러 블록에 데이터가 저장되므로 I/O 성능 저하를 불러올 수 있게 되어, 이렇게 컬럼이 많아지면 로우 체이닝과 로우 마이그레이션이 많아져서 성능이 저하되게 됩니다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">로우 체이닝(Row Chaining)</span><br><span class="line">길이가 너무 커서 하나의 블록에 저장되지 못하고 다수의 블록에 나누어져 저장</span><br><span class="line"></span><br><span class="line">로우 마이그레이션(Row Migration)</span><br><span class="line">수정된 데이터를 해당 데이터 블록에 저장하지 못하고 다른 블록의 빈 공간에 저장</span><br></pre></td></tr></table></figure><p>로우 체이닝과 로우 마이그레이션이 발생하여 많은 블록을 사용하게 되면, 불필요한 I/O가 발생하여 성능이 저하됩니다.<br>많은 I/O 발생은 성능에 직접적인 영향을 주므로 매우 중요한 문제며, 데이터에 대한 범위 검색을 할 경우 더 많은 I/O를 유발하므로 성능 저하를 일으킵니다.<br>수많은 컬럼을 동시에 조회하는 경우는 드물기 때문에,<br>각각의 조회 조건에 맞게 이용되는 컬럼들로 그룹을 묶어서 테이블 분할을 검토하게 됩니다. 하지만, 지금 상황은 컬럼이 추가되는 것이 아니라, row가 늘어나므로,  </p><p>조회나 처리에 대한 분산을 가능하게 하는 칼럼들을 기준으로 테이블을 분리하여 성능 개선에 큰 도움을 노리는 것이 아닙니다.  </p><p>그래서 만약 개발을 하게 되면, 수평분할을 고려해야합니다.<br>수평분할(Horizontal Partitioning)은 Row를 기준으로 테이블을 분리합니다.<br>만약 한 테이블에 대량의 데이터가 존재하고 트랜잭션이 몰린다면 성능 저하를 피하기 어렵습니다.  </p><p>대량의 데이터가 하나의 테이블에 있으면 인덱스 정보 생성 시 부하가 커집니다.<br>삭제와 등록을 반복하게 되면, 인덱스를 찾아가는 깊이(Depth)가 깊어지게 되고 인덱스의 크기가 커질수록 더 많은 성능 저하를 불러오게됩니다.<br>조회하는 성능보다 데이터를 처리하는 성능에 더 큰 영향을 미치게 되고,<br>이런 경우 트랜잭션이 분산 처리될 수 있도록 테이블 수평분할을 검토하게 됩니다.  </p><p>데이터 건수가 수천만 건을 넘고 처리가 많이 일어난다면 성능을 제대로 발휘할 수 없게 됩니다.<br>현재 A군과 B군의 맵핑테이블이 바로 그러합니다.<br>이때 논리적으로는 같은 테이블이지만 물리적으로 서로 다른 여러 개의 테이블 스페이스에 나누어서 저장하는 파티션 방법을 이용하면 성능 개선에 큰 도움이 됩니다.<br>파티션 종류로는 Range, Hash, List, Composite 파티션이 있으며,<br>가장 널리 이용하는 Range 파티션은 주로 날짜를 기준으로 하는 경우가 많습니다.<br>Range의 경우 데이터가 균등하게 나누어져서 비슷한 성능 개선을 보장하며, 보관 주기에 따라서 필요치 않는 데이터도 쉽게 지우고 관리할 수 있지만,<br>A군과 B군의 등록날짜들은 제 각각 이므로, 만약 하게 된다면 Hash와 List 형태가 더 올바릅니다.  </p><p>이러한 부분들에 대해 DBA와 논의할 준비를 하는 중,  </p><p>DBA 께서,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A군과 B군의 테이블에 대한 맵핑 테이블 뿐만 아니라, A군, B군, C군, D군.</span><br><span class="line">이 모든 것을 다 바꾸고, 변경해야지만 이 성능저하를 피할 수 있다.</span><br></pre></td></tr></table></figure></p><p>라는 논리를 펼쳤으며, 해당 논리의 근거를 요구했을 때 샤머니즘을 외치었기 때문에,<br>더 이상의 이야기는 진행할 수 없었으며, 5만건의 데이터는 기존 테이블에 INSERT 되게 되었습니다.  </p><p>4년이 넘게 유지된 모든 테이블 구성을 바꿔야할 경우, 개발자 입장에선 그로인한 모든 화면 및 백도어로직이 변경되게 됩니다.<br>그러면 그 근거자료가 존재해야하며,<br>논의하기 위해 준비했던 모든 자료들, 해당 테이블의 용량, INDEX구조등에 벗어난 뜬금없는 C군과 B군의 데이터 구조까지 변경해야한다면,<br>그 개발 범위를 다시 산정해야합니다.<br>그런데 그 논리가 그냥 ‘감’, 인디언 기우제 논리라면, 해당 개발건은 고착화 될 수 밖에 없으며,</p><p>그리고 그렇게 되었기 때문에 결국 유지보수로 인하여 최소화된 추가개발을 진행할 수 밖에 없게 되며,<br>개발로직이 처리할 업무를 사람이 처리하게 될 것입니다. </p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/12/2018-12-17-dbdeeplink/#disqus_thread</comments>
    </item>
    
    <item>
      <title>google_openRTB</title>
      <link>https://youngclown.github.io/2018/12/2018-12-06-google_openrtb/</link>
      <guid>https://youngclown.github.io/2018/12/2018-12-06-google_openrtb/</guid>
      <pubDate>Thu, 06 Dec 2018 03:18:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;문서-정리겸-정리합니다&quot;&gt;&lt;a href=&quot;#문서-정리겸-정리합니다&quot; class=&quot;headerlink&quot; title=&quot;문서 정리겸 정리합니다.&quot;&gt;&lt;/a&gt;문서 정리겸 정리합니다.&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문서-정리겸-정리합니다"><a href="#문서-정리겸-정리합니다" class="headerlink" title="문서 정리겸 정리합니다."></a>문서 정리겸 정리합니다.</h2><p><a href="https://github.com/google/openrtb" rel="external nofollow noopener noreferrer" target="_blank">github</a>에 올라온 google openrtb 를 적용해봅니다.</p><h2 id="The-OpenRTB-specification"><a href="#The-OpenRTB-specification" class="headerlink" title="The OpenRTB specification"></a>The OpenRTB specification</h2><p>This library implements the protocol / data model from the latest OpenRTB Specification, so reading that should be your first step; it’s also a good introduction to the concepts of real-time bidding.</p><p>OpenRTB is only specified in terms of JSON messages, so an implementation has to provide bindings for specific programming languages so you can create and manipulate its message objects in a convenient way, i.e. not needing to deal with the raw JSON representation. We do that by first translating the specification to a Protocol Buffer descriptor, which can be used to generate model classes. This library will only build a Java model out-of-the-box, but you can easily use the same Protobuf descriptor to generate the model code for many other languages. (Other features though, are only available for Java or other JVM-based languages.)</p><p>해당 google openrtb는 구글 프로토콜 버퍼 (Protocol Buffer)를 사용하여,<br>data model 을 구성하였습니다.</p><p>구글 프로토콜 버퍼란?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;프토토콜 버퍼&gt;는 랭귀지 중립적, 플랫폼 중립적인 데이터 시리얼라이즈 포맷입니다.  </span><br><span class="line"></span><br><span class="line">서로 다른 종류의 머신, 서로 다른 종류의 플랫폼에서 동일한 의미를 갖도록 데이터의 포맷을 정의한다는 점에서 &lt;프로토콜 버퍼&gt;라는 이름은 프로토콜(통신)을 위한 버퍼(데이터)을 뜻하게 되며,  </span><br><span class="line">&lt;프로토콜 버퍼&gt;는 이제 구글의 데이터 공용어 (gRPC의 디폴트 데이터 포맷) 입니다.  </span><br><span class="line"></span><br><span class="line">What is gRPC?</span><br><span class="line">- 구글이 정의한 RPC</span><br><span class="line">- 구글의 최신 API는 이제 REST API 뿐 아니라 gRPC API도 함께 제공함</span><br><span class="line">- gRPC는 &lt;프로토콜 버퍼&gt;를 기본 데이터 시리얼라이즈 포맷으로 사용 (JSON 등 다른 포맷도 사용 가능)</span><br><span class="line">- 다양한 랭귀지 지원: C++, Java, Python, Go, Ruby, C#, Node.js, PHP, ...</span><br><span class="line">  (JSON을 &lt;프로토콜 버퍼&gt;로 &lt;프로토콜 버퍼&gt;를 JSON으로 변환 가능)</span><br><span class="line">- XML보다 작고, 빠르고, 간단</span><br></pre></td></tr></table></figure><p>구글 프로토콜 버퍼를 적용하기 위해서는,<br><a href="https://github.com/protostuff/protobuf-jetbrains-plugin.git" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ protobuf plugin</a>을 설치해야합니다.<br>IntelliJ 의 Plugins 에서는 검색이 되지 않습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://plugins.jetbrains.com/plugin/8277-protobuf-support</span><br></pre></td></tr></table></figure><p>경로에 가서 프로그인을 설치해야합니다.<br>또한, maven 을 정상적으로 build 하기 위해서는 protoc 를 설치해야하며,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developers.google.com/protocol-buffers/</span><br></pre></td></tr></table></figure></p><p>를 통해 설치하였습니다.</p><p><a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.6.1" rel="external nofollow noopener noreferrer" target="_blank">releases page</a>에서,<br>protoc-3.6.1-win32.zip 파일을 받아, 윈도우기반에서 환경설정을 하였습니다.</p><p>환경설정을 하지 않을 경우에는 경우는 intellij 에, Settings &gt; Other Settings 에서 Protobuf Support 의 경로를 지정해주시면됩니다.<br>수정할 내용이 있으면 변경후, jar 파일을 만들어서 별도의 import 를 받아 처리해도 되고,</p><p><a href="https://mvnrepository.com/artifact/com.google.openrtb/openrtb-core" rel="external nofollow noopener noreferrer" target="_blank">open-core lib</a>에서 dependency 를 추가해도 됩니다.<br>maven 을 사용하기 때문에,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.google.openrtb/openrtb-core --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.openrtb&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;openrtb-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>해당 버전을 적용해도 상관없습니다.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://developers.google.com/protocol-buffers/docs/javatutorial" rel="external nofollow noopener noreferrer" target="_blank">Protocol Buffer Basics: Java</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/12/2018-12-06-google_openrtb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>null; nested exception is org.apache.http.client.ClientProtocolException</title>
      <link>https://youngclown.github.io/2018/11/2017-11-29-redirect/</link>
      <guid>https://youngclown.github.io/2018/11/2017-11-29-redirect/</guid>
      <pubDate>Thu, 29 Nov 2018 07:59:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;null-nested-exception-is-org-apache-http-client-ClientProtocolException&quot;&gt;&lt;a href=&quot;#null-nested-exception-is-org-apache-http-client-C
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="null-nested-exception-is-org-apache-http-client-ClientProtocolException"><a href="#null-nested-exception-is-org-apache-http-client-ClientProtocolException" class="headerlink" title="null; nested exception is org.apache.http.client.ClientProtocolException"></a>null; nested exception is org.apache.http.client.ClientProtocolException</h2><p>중간에 리다이렉트 조건이 존재할 경우,<br>HttpClient에서 ClientProtocolException이 일어날 수 있습니다.</p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/11/2017-11-29-redirect/#disqus_thread</comments>
    </item>
    
    <item>
      <title>로컬 https 셋팅방법</title>
      <link>https://youngclown.github.io/2018/11/2017-08-21-HTTPS/</link>
      <guid>https://youngclown.github.io/2018/11/2017-08-21-HTTPS/</guid>
      <pubDate>Thu, 29 Nov 2018 05:48:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;https-443-로컬에서-사용가능하게-이클립스-TOMCAT-JAVA-setting&quot;&gt;&lt;a href=&quot;#https-443-로컬에서-사용가능하게-이클립스-TOMCAT-JAVA-setting&quot; class=&quot;headerlink&quot; title=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="https-443-로컬에서-사용가능하게-이클립스-TOMCAT-JAVA-setting"><a href="#https-443-로컬에서-사용가능하게-이클립스-TOMCAT-JAVA-setting" class="headerlink" title="https(443) 로컬에서 사용가능하게 이클립스, TOMCAT, JAVA setting"></a>https(443) 로컬에서 사용가능하게 이클립스, TOMCAT, JAVA setting</h2><p>로컬에서, hosts를 변경하여 실 라이브 테스트 처럼 진행하고자 했을 때,<br>https 의 특정 페이지에서는 정상 동작하지 않을 경우에 대응 방안입니다.</p><p>https 인증서를 만드는 법은 <a href="https://www.comodossl.co.kr/certificate/ssl-installation-guides.aspx" rel="external nofollow noopener noreferrer" target="_blank">CSR 생성 및 인증서 적용 방법 안내</a>를 참고합니다.</p><p>Tomcat : CSR 생성 및 SSL 인증서 적용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">1. 키파일 생성</span><br><span class="line">keytool -genkey -keyalg RSA -sigalg SHA1withRSA -alias hanbiro -keysize 2048 -keystore hanbiro.key</span><br><span class="line"></span><br><span class="line">※ 참고사항(위의 빨간색 부분과 매칭되게</span><br><span class="line">hanbiro는 키의 alias 이름으로 임의로 작성합니다.</span><br><span class="line">hanbiro.key는 keystore이름으로 임의로 만듭니다</span><br><span class="line"></span><br><span class="line">Enter keystore password: (비밀번호를 입력하세요.)</span><br><span class="line"></span><br><span class="line">What is your first and last name?</span><br><span class="line">[Unknown]: www.hanbiro.com (인증서 사용을 원하는 도메인)</span><br><span class="line">What is the name of your organizational unit?</span><br><span class="line">[Unknown]: LINUX (부서명)</span><br><span class="line">What is the name of your organization?</span><br><span class="line">[Unknown]: HANBIRO (업체명)</span><br><span class="line">What is the name of your City or Locality?</span><br><span class="line">[Unknown]: SEOCHO (지역명)</span><br><span class="line">What is the name of your State or Province?</span><br><span class="line">[Unknown]: SEOUL(시/도)</span><br><span class="line">What is the two-letter country code for this unit?</span><br><span class="line">[Unknown]: KR</span><br><span class="line">Is CN=www.hanbiro.com, OU=LINUX, O=HANBIRO, L=SEOCHO, ST=SEOUL, C=KR correct?</span><br><span class="line">[no]: y</span><br><span class="line"></span><br><span class="line">Enter key password for &lt;hanbiro&gt;</span><br><span class="line">(RETURN if same as keystore password): (엔터를 입력)</span><br><span class="line"></span><br><span class="line">키파일이 제대로 생성되었는지 확인해 봅니다.</span><br><span class="line">keytool -list -keystore hanbiro.key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. CSR 생성</span><br><span class="line"></span><br><span class="line">keytool -certreq -alias hanbiro -keyalg RSA -sigalg SHA1withRSA -file hanbiro.csr -keystore hanbiro.key</span><br><span class="line"></span><br><span class="line">Enter keystore password: (키파일 생성시에 입력하였던 패스워드를 입력합니다.)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 생성된 CSR 예</span><br><span class="line"></span><br><span class="line">한비로(www.comodossl.co.kr) 에서 인증서 신청하실 때 위에서 생성하신 CSR 내용을 복사해서 붙여 넣은후 나머지 설치 절차를 거칩니다.</span><br><span class="line">생성된 CSR 을 출력하면 아래와 같은 base64 형식의 문서를 볼 수 있습니다.</span><br><span class="line"></span><br><span class="line">[root@ns root]# cat hanbiro.csr</span><br><span class="line">-----BEGIN NEW CERTIFICATE REQUEST-----</span><br><span class="line">MIIBsDCCARkCAQAwcDELMAkGA1UEBhMCS1IxDjAMBgNVBAgTBVN</span><br><span class="line">lb3VsMQ8wDQYDVQQHEwZTZW9j</span><br><span class="line">aG8xEDAOBgNVBAoTB0hhbmJpcm8xDjAMBgNVBAsTBUxpbnV4MR4w</span><br><span class="line">HAYDVQQDExV3d3cucHJvZGln</span><br><span class="line">AAGgADANBgkqhkiG9w0BAQQFAAOBgQBhV3jIaT2wEOB1/AIOedu+4</span><br><span class="line">gECrr+6UIYhwPtSmIeoWXg5</span><br><span class="line">76+UHe5I1M2M/ew5j6d8pq4IBXaTesSrmwZuuuA2Stx4uXjb/Akjr8UIDX</span><br><span class="line">isnycJGmk5dQDCCT3G</span><br><span class="line">8IBd8gwgvQOiAhnfGSjIbStsPOiVCgB60uSz9Jc8s9rPIxh69w==</span><br><span class="line">-----END NEW CERTIFICATE REQUEST-----</span><br><span class="line"></span><br><span class="line">-----BEGIN … 부터 마지막 줄 -----END … 까지 복사하여 지정된 SSL 접수페이지에 복사하여 붙여 넣은 뒤 입력정보와 함께 전송하면 접수가 완료됩니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 인증서 설치</span><br><span class="line"></span><br><span class="line">keytool -import -trustcacerts -alias COMODOSSL -file</span><br><span class="line">COMODOSSLCA.crt -keystore hanbiro.key</span><br><span class="line"></span><br><span class="line">keytool -import -trustcacerts -alias INTER -file</span><br><span class="line">AddTrustExternalCARoot -keystore hanbiro.key</span><br><span class="line"></span><br><span class="line">keytool -import -trustcacerts -alias hanbiro -file</span><br><span class="line">www_hanbiro.crt -keystore hanbiro.key</span><br><span class="line"></span><br><span class="line">##주의##</span><br><span class="line">Free SSL 및 PostiveSSL 의 경우, PostiveSSLCA.crt 파일을 추가 하지 않았을 경우,</span><br><span class="line">아래와 같은 메세지가 표시 되며 저장 되지 않으니 반드시 아래 작업을 진행하여 주시기 바랍니다.</span><br><span class="line">또한 -alias 설정시 .등의 특수문자가 있을 경우 인증서를 적용할 수 없습니다.</span><br><span class="line">예) keytool -import -trustcacerts -alias www.hanbiro.com -file PositiveSSLCA.crt -keystore hanbiro.key (X)</span><br><span class="line">keytool -import -trustcacerts -alias wwwhanbirocom -file PositiveSSLCA.crt -keystore hanbiro.key (0)</span><br><span class="line">에러내용</span><br><span class="line">keytool error: java.lang.Exception: Failed to establish chain from reply</span><br><span class="line"></span><br><span class="line">추가내용</span><br><span class="line">keytool -import -trustcacerts -alias POSITIVESSL -file PositiveSSLCA.crt -keystore hanbiro.key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 서버설정</span><br><span class="line">Server.xml을 설정합니다.</span><br><span class="line"></span><br><span class="line"># Tomcat 버젼 8.X 의 경우..</span><br><span class="line">&lt;Connector port=&quot;443&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">   maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">   clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</span><br><span class="line">   keystoreFile=&quot;키스토어파일경로/hanbiro.key&quot; keystorePass=&quot;hanbiro.key 패스워드&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"># Tomcat 버젼 7.X 의 경우..</span><br><span class="line">&lt; -- Define a SSL Coyote HTTP/1.1 Connector on port 8443 --&gt;</span><br><span class="line">&lt;Connector port=&quot;8443&quot;</span><br><span class="line">   maxThreads=&quot;200&quot;</span><br><span class="line">   scheme=&quot;https&quot; secure=&quot;true&quot; SSLEnabled=&quot;true&quot;</span><br><span class="line">   keystoreFile=&quot;키스토어파일경로/hanbiro.key&quot; keystorePass=&quot;(hanbiro.key 패스워드)&quot; clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"># Tomcat 버젼 6.X 의 경우..</span><br><span class="line">&lt;!--Define a SSL Coyote HTTP/1.1 Connector on port 8443 --&gt;</span><br><span class="line">&lt;Connector port=&quot;443&quot;</span><br><span class="line">   maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot; enableLookups=&quot;false&quot; disableUploadTimeout=&quot;true&quot;</span><br><span class="line">   acceptCount=&quot;100&quot; debug=&quot;0&quot; scheme=&quot;https&quot; secure=&quot;true&quot; SSLEnabled=&quot;true&quot;  clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</span><br><span class="line">   keystoreFile=&quot;키스토어파일경로/hanbiro.key&quot; keystorePass=&quot;(hanbiro.key 패스워드)&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"># Tomcat 버젼 5.X 의 경우..</span><br><span class="line">&lt;!--Define a SSL Coyote HTTP/1.1 Connector on port 8443 --&gt;</span><br><span class="line">&lt;Connector port=&quot;443&quot;</span><br><span class="line">   maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;  enableLookups=&quot;false&quot; disableUploadTimeout=&quot;true&quot;</span><br><span class="line">   acceptCount=&quot;100&quot; debug=&quot;0&quot; scheme=&quot;https&quot; secure=&quot;true&quot;  clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</span><br><span class="line">   keystoreFile=&quot;키스토어파일경로/hanbiro.key&quot;  keystorePass=&quot;(hanbiro.key 패스워드)&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"># Tomcat 버전 4.X 의 경우.</span><br><span class="line">&lt;!-- Define a SSL Coyote HTTP/1.1 Connector on port 8443 --&gt;</span><br><span class="line">&lt;Connector className=&quot;org.apache.coyote.tomcat4.CoyoteConnector&quot; port=&quot;443&quot; minProcessors=&quot;5&quot; maxProcessors=&quot;75&quot;</span><br><span class="line">  enableLookups=&quot;true&quot;  acceptCount=&quot;100&quot; debug=&quot;0&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">  useURIValidationHack=&quot;false&quot; disableUploadTimeout=&quot;true&quot; /&gt;</span><br><span class="line">&lt;Factory className=&quot;org.apache.coyote.tomcat4.CoyoteServerSocketFactory&quot;</span><br><span class="line">  clientAuth=&quot;false&quot; protocol=&quot;TLS&quot;  keystoreFile=&quot;키스토어파일경로/hanbiro.key&quot;  keystorePass=&quot;(hanbiro.key 패스워드)&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. 톰캣 재시작</span><br><span class="line"></span><br><span class="line">shutdown.sh</span><br><span class="line">startup.sh</span><br></pre></td></tr></table></figure></p><p>이라고 tomcat 설정에는 나와있는데요.</p><p>이를 통해 만들어진  STAR.keystore 파일을 임의의 경로로 이동시킵니다.<br>(예제에서는 D:/workset/STAR.xxxx.or.kr.keystore 로 정의합니다.)</p><p>Tomcat 이 설치되어있는 디렉토리로 이동하여,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\workset\apache-tomcat-8.0.37-windows-x64\apache-tomcat-8.0.37\conf</span><br></pre></td></tr></table></figure></p><p>server.xml 파일을 엽니다.</p><p>8080 port 값을 80 으로 변경하고, 8443 port 값을 443 으로 변경하는데요.<br><img src="/images/20170821https.PNG" alt="이미지">{: width=”100%”}</p><p><connector sslenabled="true" clientauth="false" connectiontimeout="3000" keystorefile="D:/workset/STAR.xxxx.or.kr.keystore" keystorepass="패스워드" maxthreads="1500" port="443" protocol="org.apache.coyote.http11.Http11Protocol" scheme="https" secure="true" sslprotocols="TLSv1,TLSv1.1,TLSv1.2"> 으로 수정합니다.</connector></p><p>해당 방법으로 작업시 편한 이유가, tomcat 설정의 server.xml 을 변경했기 때문에,<br>이클립스에서 별도의 80, 443을 변경하지 않더라도,</p><p>별도의 config 서버가 설정될때마다 자동으로 80포트가 적용됩니다.<br>(기존 8080을 사용하던 분들은 위에서 8080 port 를 80으로 변경하지 않으면됩니다.)</p><p>IntelliJ의 경우에는 이클립스와 다르게 별도의 config 설정을 가져가서 사용하지 않고,<br>직접접속하기 때문에,<br>server.xml 한번만 적용시 매우 편하게 처리할 수 있어 내부 개발시 매우 편리합니다.</p><p>PS. 가상의 keystoreFile을 만들 수는 있으나, 그럴 경우 처음 한번은 안전하지않음에서 그럼에도 불구하고 사용하도록 별도의 승인처리를 한번 이상해야하지만,<br>실 라이브에 있는 keystoreFile을 사용할 경우, 인증서 문제를 해결할 수 있습니다.</p><p>다만, localhost 로 그대로 사용시 안전하지 않음에 대한 경고가 다시 뜰 수 있으므로, hosts 변경을 통해 해당 도메인으로의 변경작업은 필요합니다.</p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/11/2017-08-21-HTTPS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openRTB</title>
      <link>https://youngclown.github.io/2018/11/2018-11-27-openrtb/</link>
      <guid>https://youngclown.github.io/2018/11/2018-11-27-openrtb/</guid>
      <pubDate>Tue, 27 Nov 2018 02:35:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;RTB-Real-Time-Bidding-실시간-경매-방식&quot;&gt;&lt;a href=&quot;#RTB-Real-Time-Bidding-실시간-경매-방식&quot; class=&quot;headerlink&quot; title=&quot;RTB - Real Time Bidding(실시간 경매
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="RTB-Real-Time-Bidding-실시간-경매-방식"><a href="#RTB-Real-Time-Bidding-실시간-경매-방식" class="headerlink" title="RTB - Real Time Bidding(실시간 경매 방식)"></a>RTB - Real Time Bidding(실시간 경매 방식)</h2><p>제가 openRTB 프로젝트를 시작하게 된 것은, 2년전 이 시기에 2016년 11월 경이었는데요.<br>다음카카오쪽에서 카카오스토리와 폴털 지면 등에 RTB를 추가하면서 해당 RTB를 대응하기 위한 구축을 위해서였습니다.</p><p>RTB 라는 것이 실시간 경매 방식을 의미하고요.<br>경쟁자들 사이에서 제일 비싼 값을 치르겠다고 말한 광고주가 광고 지면을 가져가는 형태가 경매 방식과 동일하여 붙여진 이름입니다.<br>경매 방식 중 이차가격 경매(Second-Price Auction) 등의 시스템이 openRTB에 그대로 사용됩니다.</p><p>경매를 하려면 경매를 벌일 사람들과 장소가 있어야 합니다.<br>[구매자]와 [판매자], [중개소] 가 필요합니다.<br>1:1로 물건을 사고파는 환경이라면 이 시스템은 있을 필요가 없습니다.  </p><p>경매 중개소에서 구매자는 자신에게 적합한 물건을 찾고, 이를 판매하려는 판매자에게 가격을 부릅니다.<br>RTB 광고 시장에도 구매자와 판매자, 중개소가 등장합니다.<br>DSP(구매자)와 SSP(판매자), 애드 익스체인지(중개소)가 그 역활을 합니다.</p><p>제가 개발을 하면서 느낀 점은,<br>Global 한 OpenRTB 프로젝트의 목표와, 국내 OpenRTB의 상황의 온도차가 조금 존재했습니다.  </p><p>Global 한 OpenRTB의 경우 기본적으로 바이어와 광고주, 퍼블리셔 간의 커뮤니케이션을 회사 표준안으로 통합해서 제공하여 Real-Time-Bidding 시장을 더욱더 성장시키는 것을 주목적으로 두는 것으로 이해했습니다.  </p><p>한마디로, OpenRTB의 궁극의 목표는 바이어와 셀러 간의 커뮤니케이션에서 사용될 공통어를 만드는 것이었습니다.<br>구글의 광고 디자인이 simple 하며, 실제 openRTB의 연동 SSP(&amp; ADExchange) 들의 디자인이 깔끔한 것이 그러한 점을 뒷받침해줍니다.  </p><p>국내의 경우는 DSP 의 광고의 얼마나 사용자에게 얼만큼의 유용한 광고가 송출되는지도 중요하지만, 그걸 표현하는 디자인을 조금더 감각적으로 표현하려고 합니다.<br>그러하기 때문에 국내의 대부분의 광고솔류션을 가진 업체들은 RTB가 필수가 아닌,<br>광고 플랫폼 사이에서 광고주의 편의를 돋는 하나의 기능일 뿐 플랫폼이 존재하는 목적이 아니기 때문에,<br>상황에 맞는 광고플랫폼에서 그 플랫폼 성격에 맞는 RTB 시스템을 구축하여,<br>추후에도 해당 광고솔류션의 경쟁력을 그대로 가져가는 형태로 진행되는 형태가 국내의 OpenRTB의 최종 목적지가 되는 것은 아닌가 싶으며,<br>그런 부분에서 국내와 해외의 openRTB 연동에서 해당 내용을 알맞게 조휼한다는 것은 꽤 어려운 일로 보입니다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RTB - 실시간으로 각각의 노출을 소비자가 기다리는 시간 동안 경매(입찰)</span><br><span class="line">Exchange - 노출 당 입찰자들 사이에서 경매를 하는 서비스</span><br><span class="line">Bidder - 노출을 얻기 위해 실시간 경매에서 경쟁하는 기업(엔티티)</span><br><span class="line">Seat - 노출을 얻기 원하는 기업이 입찰을 대신할 입찰자를 고용하는 것.</span><br><span class="line">Publisher - 하나 이상의 사이트를 운영하는 기업(엔티티)</span><br><span class="line">Site - 특별한 경우가 아니면 광고는 웹과 응용프로그램을 포함한 콘텐츠를 지원</span><br><span class="line">Deal ID - 특정 조건에 따라 광고 노출을 구매하는 Seat와 Publisher 사이에 기정 계약을 나타내는 ID</span><br></pre></td></tr></table></figure><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="http://www.ditoday.com/articles/articles_view.html?idno=19241" rel="external nofollow noopener noreferrer" target="_blank">RTB는 국내 광고 시장을 어떻게 바꿔 놓을까</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/11/2018-11-27-openrtb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WINDOWS 10 Bash Shell</title>
      <link>https://youngclown.github.io/2018/11/2018-11-21-windowsSetting/</link>
      <guid>https://youngclown.github.io/2018/11/2018-11-21-windowsSetting/</guid>
      <pubDate>Wed, 21 Nov 2018 11:57:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;윈도우즈-10에서-Linux-bash-shell-사용방법&quot;&gt;&lt;a href=&quot;#윈도우즈-10에서-Linux-bash-shell-사용방법&quot; class=&quot;headerlink&quot; title=&quot;윈도우즈 10에서 Linux bash shell 사용방
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="윈도우즈-10에서-Linux-bash-shell-사용방법"><a href="#윈도우즈-10에서-Linux-bash-shell-사용방법" class="headerlink" title="윈도우즈 10에서 Linux bash shell 사용방법"></a>윈도우즈 10에서 Linux bash shell 사용방법</h2><p>윈도우즈 10에서는 우분투(Ubuntu bash shell) 리눅스  쉘이 사용 가능합니다.<br>윈도우에서 리눅스를 사용할 수 있다니 얼마나 행복한 일인가요~ 현재 베타 버전으로 윈도우 10에서 사용이 가능합니다.<br>사용방법은 비교적 간단합니다.   </p><h2 id="윈도우즈-설정으로-이동"><a href="#윈도우즈-설정으로-이동" class="headerlink" title="윈도우즈 설정으로 이동"></a>윈도우즈 설정으로 이동</h2><p>업데이트 및 복구 &gt; 개발자 모드 선택<br>제어판 &gt; 프로그램 &gt; 윈도우 기능켜기/끄기 &gt; 윈도우리눅스프로그램(리눅스용윈도우 하위시스템) 선택  </p><h2 id="Open-PowerShell-as-Administrator-and-run"><a href="#Open-PowerShell-as-Administrator-and-run" class="headerlink" title="Open PowerShell as Administrator and run:"></a>Open PowerShell as Administrator and run:</h2><p>PowerShell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure></p><p>윈도우즈의 Microsoft Store에서 다운받아 설치하는 합니다.<br><a href="https://aka.ms/wslstore" rel="external nofollow noopener noreferrer" target="_blank">윈도우 우분투</a> 이동 후 앱에서 ubuntu를 클릭하여 설치합니다.</p><p>루트권한으로 접속하기 위해서는,<br>만약 루트 권한으로 바꾸려면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>명령어를 사용하면 가능함. 실제 경로는 윈도우즈 최근 버젼에서는!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\%USERNAME%\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\</span><br></pre></td></tr></table></figure><p>이처럼 경로가 좀 더 복잡하게 바뀌었습니다.<br>만약 숨겨진 폴더를 찾기 어려우면 탐색기 옵션에서 숨겨진 폴더 보기 옵션을 선택하시기 바랍니다.<br>찾기가 더 간단하며 이를 즐겨찾기에 포함해두시면 더 좋습니다.</p><h2 id="JAVA-설치하기"><a href="#JAVA-설치하기" class="headerlink" title="JAVA 설치하기"></a>JAVA 설치하기</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br><span class="line">apt install openjdk-8-jdk-headless</span><br></pre></td></tr></table></figure><p>openjdk 를 설치합니다.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10" rel="external nofollow noopener noreferrer" target="_blank">Windows 10 Installation Guide</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/11/2018-11-21-windowsSetting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MBean (JMX) Monitoring and Management</title>
      <link>https://youngclown.github.io/2018/11/2018-11-20-registerMbeans/</link>
      <guid>https://youngclown.github.io/2018/11/2018-11-20-registerMbeans/</guid>
      <pubDate>Tue, 20 Nov 2018 08:48:28 GMT</pubDate>
      <description>
      
        
        
          &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
        
      
      </description>
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;Resource name=&quot;xxx&quot; auth=&quot;Container&quot;</span><br><span class="line">     factory=&quot;com.zaxxer.hikari.HikariJNDIFactory&quot;</span><br><span class="line">     type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">     minimumIdle=&quot;30&quot;</span><br><span class="line">     maximumPoolSize=&quot;30&quot;</span><br><span class="line">     maxLifetime=&quot;3600000&quot;</span><br><span class="line">     connectionTimeout=&quot;5000&quot;</span><br><span class="line">     dataSourceClassName=&quot;com.mysql.jdbc.jdbc2.optional.MysqlDataSource&quot;</span><br><span class="line">     dataSource.cachePrepStmts=&quot;true&quot;</span><br><span class="line">     dataSource.prepStmtCacheSize=&quot;250&quot;</span><br><span class="line">     dataSource.prepStmtCacheSqlLimit=&quot;2048&quot;</span><br><span class="line">     registerMbeans=&quot;true&quot;</span><br><span class="line">     dataSource.logger=&quot;com.mysql.jdbc.log.StandardLogger&quot;</span><br><span class="line">     dataSource.logSlowQueries=&quot;false&quot;</span><br><span class="line">     dataSource.dumpQueriesOnException=&quot;false&quot;</span><br><span class="line">     dataSource.user=&quot;xxxx&quot;</span><br><span class="line">     dataSource.password=&quot;xxxx&quot;</span><br><span class="line">     dataSource.url=&quot;jdbc:mysql:/xxxxx:3306/xxx?autoReconnect=true&quot;</span><br><span class="line">     validationQuery=&quot;SELECT 1&quot;</span><br><span class="line">     validationInterval=&quot;240000&quot;</span><br><span class="line">     testWhileIdle=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><p>초창기 JNDI(tomcat-jdbc)의 경우 JMX(jconsole 등)에 대한 설정에서 자동으로 dbfool 이 보였으나,<br>HikariCP를 적용하면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registerMbeans=true</span><br></pre></td></tr></table></figure><p>를 해야지만, JMX 에서 확인이 가능하다고 합니다.<br>스프링 부트 2.0 의 default DBCP가 hikariCP 가 되었다고 합니다.</p><p>항상 hikariCP의 설명을 보면, 엄청 빠르고 가볍고, 신뢰할 수 있다고 설명합니다.<br>심지어 “zero-overhead”라며 엄청나게 높은 성능을 강조합니다.</p><p>2년전에 도입되었는데, 스프링 부트 2.0 의 default가 되었다는 것은 확실히 빠른다 뭐 그런 의미겠지요.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide#configuring-a-datasource" rel="external nofollow noopener noreferrer" target="_blank">HikariCP</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/11/2018-11-20-registerMbeans/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cannot create JDBC driver of class</title>
      <link>https://youngclown.github.io/2018/11/2018-11-05-context/</link>
      <guid>https://youngclown.github.io/2018/11/2018-11-05-context/</guid>
      <pubDate>Mon, 05 Nov 2018 13:39:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;새로운 db connection 을 연결했는데,&lt;br&gt;Tomcat에서 datasource/context정보를 못찾을 때.&lt;br&gt;다음과 같은 오류 내용이 발생했습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>새로운 db connection 을 연결했는데,<br>Tomcat에서 datasource/context정보를 못찾을 때.<br>다음과 같은 오류 내용이 발생했습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot create JDBC driver of class &apos;&apos; for connect URL &apos;null&apos;</span><br></pre></td></tr></table></figure><p>일때.<br>datasource.properties  를 설정하여 처리하도록 작업이 되어있으며,<br>tomcat의 server.xml 을 설정해두었는데,<br>server.xml 파일 <host>태그에 하부 엘리먼트로<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context&gt;</span><br><span class="line">    &lt;ResourceLink name=&quot;xxx&quot; global=&quot;xxx&quot; type=&quot;javax.sql.DataSource&quot;/&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></host></p><p>위와같이 설정했어야했는데, context.xml 쪽 이슈는 빼면서 발생했습니다.<br>ResourceLink 를 통해, server.xml 에서 정의하였습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;Resource name=&quot;xxx&quot; auth=&quot;Container&quot;</span><br><span class="line">     factory=&quot;com.zaxxer.hikari.HikariJNDIFactory&quot;</span><br><span class="line">     type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">     minimumIdle=&quot;30&quot;</span><br><span class="line">     maximumPoolSize=&quot;30&quot;</span><br><span class="line">     maxLifetime=&quot;3600000&quot;</span><br><span class="line">     connectionTimeout=&quot;5000&quot;</span><br><span class="line">     dataSourceClassName=&quot;com.mysql.jdbc.jdbc2.optional.MysqlDataSource&quot;</span><br><span class="line">     dataSource.cachePrepStmts=&quot;true&quot;</span><br><span class="line">     dataSource.prepStmtCacheSize=&quot;250&quot;</span><br><span class="line">     dataSource.prepStmtCacheSqlLimit=&quot;2048&quot;</span><br><span class="line">     registerMbeans=&quot;true&quot;</span><br><span class="line">     dataSource.logger=&quot;com.mysql.jdbc.log.StandardLogger&quot;</span><br><span class="line">     dataSource.logSlowQueries=&quot;false&quot;</span><br><span class="line">     dataSource.dumpQueriesOnException=&quot;false&quot;</span><br><span class="line">     dataSource.user=&quot;xxxxx&quot;</span><br><span class="line">     dataSource.password=&quot;xxxxx&quot;</span><br><span class="line">     dataSource.url=&quot;jdbc:mysql://xxxxx:3306/xxx?autoReconnect=true&quot;</span><br><span class="line">     validationQuery=&quot;SELECT 1&quot;</span><br><span class="line">     validationInterval=&quot;240000&quot;</span><br><span class="line">     testWhileIdle=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><p>resource에 정의해두었기 때문에 server.xml 에만 정의하면 이슈가 발생합니다.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/11/2018-11-05-context/#disqus_thread</comments>
    </item>
    
    <item>
      <title>이클립스 CPU 100%</title>
      <link>https://youngclown.github.io/2018/10/2018-10-29-eclipse/</link>
      <guid>https://youngclown.github.io/2018/10/2018-10-29-eclipse/</guid>
      <pubDate>Mon, 29 Oct 2018 14:06:40 GMT</pubDate>
      <description>
      
        
        
          &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
        
      
      </description>
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linking viewer selection with current editor</span><br></pre></td></tr></table></figure><p>위와같은 메시지가 우측하단에 노출되면서 cpu 100% 를 차지하는데, 실제 메모리라든가 다른 문제는 없었습니다.<br>소스 수정 및 반영을 하는데도 상당히 시간이 오래 걸렸는데,<br>인터넷 서핑을 해보니,<br>eclipse 의 PermSize 를 늘려주지 문제가 해결되었다고 합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:PermSize=512m</span><br><span class="line">-XX:MaxPermSize=512m</span><br><span class="line">-Xms2048m</span><br><span class="line">-Xmx2048m</span><br></pre></td></tr></table></figure></p><p>PermSize 하고, MaxPermSize 기능 추가했습니다.</p><p>성능향상을 위해,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Help-&gt;About Eclipse-&gt;Installation Details-&gt;Installed Software</span><br></pre></td></tr></table></figure></p><p>mylyn 플러그인 제거(php 용)하였습니다.<br>어느정도 성능이 안정화되었지만,<br>결국 이클립스보다 인텔리J로 코딩할때 안정감이 있어, 툴 변경을 고민중입니다.</p><p>==== 2018.11.20 추가내용 ====<br>아무리 해도 해결이 안되어서 인텔리J로 작업중이었는데,<br>창을 전부 닫고,<br>재시작하니 문제가 해결되었습니다.<br>PermSize라기보다,<br>프로젝트를 자주 close 하고 다시 open 하면서 남겨있던 java 파일과 linking viewer 사이에 뭔가 문제가 발생해서, 지연이 발생된게 아닌가 추측합니다.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://stackoverflow.com/questions/7315019/problem-in-linking-viewer-selection-with-current-editor-eclipse" rel="external nofollow noopener noreferrer" target="_blank">problem in linking viewer selection with current editor - Eclipse</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/10/2018-10-29-eclipse/#disqus_thread</comments>
    </item>
    
    <item>
      <title>스프링 프레임워크를 기반으로 한 개발플랫폼 01</title>
      <link>https://youngclown.github.io/2018/10/2018-10-27-springboot/</link>
      <guid>https://youngclown.github.io/2018/10/2018-10-27-springboot/</guid>
      <pubDate>Mon, 29 Oct 2018 04:54:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;스프링-부트-기능정의&quot;&gt;&lt;a href=&quot;#스프링-부트-기능정의&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 기능정의&quot;&gt;&lt;/a&gt;스프링 부트 기능정의&lt;/h2&gt;&lt;p&gt;단독실행가능한 스프링 애플리케이션 생성&lt;br&gt;내장 컨테이너로 
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="스프링-부트-기능정의"><a href="#스프링-부트-기능정의" class="headerlink" title="스프링 부트 기능정의"></a>스프링 부트 기능정의</h2><p>단독실행가능한 스프링 애플리케이션 생성<br>내장 컨테이너로 톰캣, 제티, 혹은 언더토우 중에서 선택가능<br>스타터(starter)를 통해 간결한 의존성 구성지원<br>스프링에 대한 자동구성(Auto-Configuration) 제공<br>더이상 XML 구성 필요없음 (pom.xml 정도만 작업 후 순수한 자바만 가지고 적용가능.<br>제품 출시(release) 후 운영에 필요한 다양한 기능(상태점검, 모니터링 등) 제공 (healthcheck?)</p><h2 id="스프링부트-구성요소"><a href="#스프링부트-구성요소" class="headerlink" title="스프링부트 구성요소"></a>스프링부트 구성요소</h2><p>빌드도구(그레이들 vs 메이븐) : 요근대는 그레이들을 많이씀. (아직 maven 사용)<br>스프링 프레임워크(4.x vs 5.x)<br>스프링 부트(v1.5 vs v2.0)<br>스프링 부트 스타터(spring-boot-starter)</p><p>프랑스 철학자 ‘장 풀 샤르트르’가 인생은 BCD 라고 했다고 합니다.<br>태어나고(Bitch)- 죽는(Death) 사이에 수많은 선택을 한다고,</p><p>스트링 부트 또한 BCD입니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Build - Code - Deploy</span><br></pre></td></tr></table></figure></p><ul><li>Build</li><li>Code.<ul><li>spring-boot-starter</li><li>Auto-configuration</li><li>programming in spring enviroment</li></ul></li><li>Deploy</li></ul><h2 id="Build-빌드"><a href="#Build-빌드" class="headerlink" title="Build(빌드)"></a>Build(빌드)</h2><p>[spring initializr]:(<a href="https://start.spring.io)를" rel="external nofollow noopener noreferrer" target="_blank">https://start.spring.io)를</a> 통해 파일을 생성해서 다운받을 수 있습니다.</p><h2 id="Java-va-Kotilin-vs-Groovy"><a href="#Java-va-Kotilin-vs-Groovy" class="headerlink" title="Java va Kotilin vs Groovy"></a>Java va Kotilin vs Groovy</h2><p>스프링 부트는 자바, 코틀린, 그루비를 지원합니다.</p><p>빌드도구로는 그레이들과 메이븐이 있는데,<br>의존성과 빌드동작들을 실행하는 스크립트가 존재합니다.<br>그래들은 build.gradle 에 선언하고 maven의 경우 pom.xml 에 선언하게 됩니다.</p><p>Executable Jar or war</p><p>실행학능한(Executable) JAR (or WAR) : App 과 tocmat 이 공존<br>고전적인 WAR : 톰캣과 APP이 분리되어있는 형태</p><h2 id="스프링부트는-2-0부터"><a href="#스프링부트는-2-0부터" class="headerlink" title="스프링부트는 2.0부터!!"></a>스프링부트는 2.0부터!!</h2><p>1.5 는 스프링 4 지원 2.0은 스프링 5 지원이며 주가되는 것은 스프링부트 2.0을 주가 됩니다.</p><h2 id="스프링부트는-애너테이션-기반으로-작동-컴포넌트를-탐색하여-동작함"><a href="#스프링부트는-애너테이션-기반으로-작동-컴포넌트를-탐색하여-동작함" class="headerlink" title="스프링부트는 애너테이션 기반으로 작동(컴포넌트를 탐색하여 동작함.)"></a>스프링부트는 애너테이션 기반으로 작동(컴포넌트를 탐색하여 동작함.)</h2><p>@SpringBoodtApplication(with SpringApplication)<br>@ComponentScan<br>@EnableAutoConfiguration<br>@configuration<br>@ConditonalOn~~<br>@SpringBoodtConfigration(= @Configuration)<br>@EnableConfigurationProperties<br>@ConfigurationProperties</p><h2 id="Auto-Configuration"><a href="#Auto-Configuration" class="headerlink" title="Auto-Configuration"></a>Auto-Configuration</h2><ul><li>spring-starter 를 github에서 검색가능합니다.</li><li>스프링부트가 기술흐름에 따라 제공하는 관례(Convention)적인 구성</li><li>봐야할 모듈 : spring-boot-autoconfigure</li><li>동작선언<ul><li>@EnableAtuoConfigurazion(with @SpringBootApplication)</li><li>@Configuration</li></ul></li><li>tkdyd dosjxpdltus<ul><li>@Configuration</li><li>@ConditonalOn</li></ul></li></ul><h2 id="외부구성-External-Configuration"><a href="#외부구성-External-Configuration" class="headerlink" title="외부구성(External Configuration)"></a>외부구성(External Configuration)</h2><ol><li>실행인자</li><li>spring_application_json<ul><li>서버안에 json 으로 선언한 구성파일의 위치 지정</li></ul></li><li>환경변수(운영체제)</li><li>기타등등</li><li>application.yml or application.properties</li><li>application-{defaultprofiles}.yml</li></ol><p>1이 우선순위가 가장높습니다.</p><h2 id="Programming-in-Spring-Environment"><a href="#Programming-in-Spring-Environment" class="headerlink" title="Programming in Spring Environment"></a>Programming in Spring Environment</h2><ul><li>@ComponentScan 을 통해 ApplicationContext 적재<ul><li>@Repository</li><li>@Component</li><li>@Service</li><li>@Controller &amp; @RestController</li><li>@Configuratioin<ul><li>@Bean</li><li>@ConfiguraitonProperties</li></ul></li><li>DI, IoC, @Autowired</li><li>@Value Vs @ConfigurationProperties</li><li>AOP 프로그래밍</li></ul></li></ul><p>완료<br>– 업무 구현(비즈니스 로직)</p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/10/2018-10-27-springboot/#disqus_thread</comments>
    </item>
    
    <item>
      <title>clean package -P</title>
      <link>https://youngclown.github.io/2018/10/2018-10-29-clean_package/</link>
      <guid>https://youngclown.github.io/2018/10/2018-10-29-clean_package/</guid>
      <pubDate>Mon, 29 Oct 2018 02:29:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;maven package clean 하게 처리하면서 pom.xml 에 기술한 resource 를 사용하는 법입니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>maven package clean 하게 처리하면서 pom.xml 에 기술한 resource 를 사용하는 법입니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package -P</span><br></pre></td></tr></table></figure><p>-P는 정의된 profies중 하나를 처리함을 의미합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- profile definition --&gt;</span><br><span class="line">   &lt;profiles&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;local&lt;/id&gt;</span><br><span class="line">           &lt;activation&gt;</span><br><span class="line">               &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">           &lt;/activation&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;environment&gt;&lt;/environment&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;profile-id&gt;dev&lt;/profile-id&gt;</span><br><span class="line">               &lt;environment&gt;-dev&lt;/environment&gt;</span><br><span class="line">               &lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;server&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;profile-id&gt;server&lt;/profile-id&gt;</span><br><span class="line">               &lt;environment&gt;-server&lt;/environment&gt;</span><br><span class="line">               &lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">   &lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>위와같이 server, dev, local 등을 설정할 수 있으며 그냥 처리할 경우, activeByDefault에 의해 local 이 default 처리됩니다.<br>resources-batch 와 같이 resource뒤에 접미사를 ‘-dev’ , ‘-batch’등으로 두어 프로파일을 선택할 수 있도록 합니다.</p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/10/2018-10-29-clean_package/#disqus_thread</comments>
    </item>
    
    <item>
      <title>protocol 설정하기</title>
      <link>https://youngclown.github.io/2018/10/2018-10-29-protocol/</link>
      <guid>https://youngclown.github.io/2018/10/2018-10-29-protocol/</guid>
      <pubDate>Mon, 29 Oct 2018 01:06:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;org-apache-coyote-http11-Http11NioProtocol-로-변경&quot;&gt;&lt;a href=&quot;#org-apache-coyote-http11-Http11NioProtocol-로-변경&quot; class=&quot;headerlink&quot; title
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="org-apache-coyote-http11-Http11NioProtocol-로-변경"><a href="#org-apache-coyote-http11-Http11NioProtocol-로-변경" class="headerlink" title="org.apache.coyote.http11.Http11NioProtocol 로 변경"></a>org.apache.coyote.http11.Http11NioProtocol 로 변경</h2><p>BIO connector  에 비해서 NIO connector 를 사용하는 것 자체로 20~30% 정도의 성능 향상이 이루어진다고 합니다.<br>현재 server.xml 을 보았을 때,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector protocol=&quot;HTTP/1.1&quot; port=&quot;80&quot; enableLookups=&quot;false&quot; tcpNoDelay=&quot;true&quot;  compression=&quot;off&quot;</span><br><span class="line">           maxThreads=&quot;5000&quot; minSpareThreads=&quot;50&quot; acceptCount=&quot;10&quot; connectionTimeout=&quot;8000&quot;</span><br><span class="line">           maxKeepAliveRequests=&quot;-1&quot; maxHttpHeaderSize=&quot;40960&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;Connector port=&quot;443&quot; keystoreFile=&quot;파일경로&quot;                </span><br><span class="line">               keystorePass=&quot;비밀번호&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot;</span><br><span class="line">              maxThreads=&quot;4000&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">              clientAuth=&quot;false&quot; connectionTimeout=&quot;8000&quot; maxHttpHeaderSize=&quot;40960&quot; /&gt;</span><br></pre></td></tr></table></figure><p>protocol=”HTTP/1.1”와 protocol=”org.apache.coyote.http11.Http11Protocol”를 사용하고 있습니다.<br>80포트로 사용하는 protocol=”HTTP/1.1” 를 org.apache.coyote.http11.Http11NioProtocol 로 변경하였으며,<br>기존에 쓰던 org.apache.coyote.http11.Http11Protocol 또한 org.apache.coyote.http11.Http11NioProtocol으로 변경하여 전체 서버 적용하여 안정화가 되었다는<br>이야기를 들어, 제 서버에도 적용해봤습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;Connector protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; port=&quot;80&quot; enableLookups=&quot;false&quot; tcpNoDelay=&quot;true&quot;  compression=&quot;off&quot;</span><br><span class="line">           maxThreads=&quot;5000&quot; minSpareThreads=&quot;50&quot; acceptCount=&quot;10&quot; connectionTimeout=&quot;8000&quot;</span><br><span class="line">           maxKeepAliveRequests=&quot;-1&quot; maxHttpHeaderSize=&quot;40960&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;Connector port=&quot;443&quot; keystoreFile=&quot;파일경로&quot;                </span><br><span class="line">               keystorePass=&quot;비밀번호&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class="line">              maxThreads=&quot;4000&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">              clientAuth=&quot;false&quot; connectionTimeout=&quot;8000&quot; maxHttpHeaderSize=&quot;40960&quot; /&gt;</span><br></pre></td></tr></table></figure><p>전체 변경을 완료했습니다.<br>변경 전과 변경 후의 Thread 갯수와 속도 개선등의 명확한 수치 변화는 확인되지 않았습니다. 오히려 Thread 가 100개 정도 더 증가된 것으로 확인이되네요.</p><p>참고로 톰캣에서 protocol을 설정하지 않으면 아래의 2가지 connector를 자동으로 스위칭 한다고 하는데,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blocking Java connector - org.apache.coyote.http11.Http11Protocol</span><br><span class="line">the APR/native connector - org.apache.coyote.http11.Http11AprProtocol</span><br></pre></td></tr></table></figure><p>위의 2가지로 스위칭한다고 합니다.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://sejoung.github.io/2018/10/tomcat_thread_blocking_ssl" rel="external nofollow noopener noreferrer" target="_blank">tomcat_thread_blocking_ssl</a></li><li><a href="http://bcho.tistory.com/788" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat Tuning</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/10/2018-10-29-protocol/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Alias 설정하기</title>
      <link>https://youngclown.github.io/2018/10/2018-10-24-alias_setting/</link>
      <guid>https://youngclown.github.io/2018/10/2018-10-24-alias_setting/</guid>
      <pubDate>Wed, 24 Oct 2018 05:38:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;alias-란&quot;&gt;&lt;a href=&quot;#alias-란&quot; class=&quot;headerlink&quot; title=&quot;alias 란 ?&quot;&gt;&lt;/a&gt;alias 란 ?&lt;/h2&gt;&lt;p&gt;일종의 별명으로, 서버에서 작업하거나 모니터링을 할 때,&lt;br&gt;너무 길거나 복잡해서
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="alias-란"><a href="#alias-란" class="headerlink" title="alias 란 ?"></a>alias 란 ?</h2><p>일종의 별명으로, 서버에서 작업하거나 모니터링을 할 때,<br>너무 길거나 복잡해서 매번 입력하기 귀찮거나 기억하기 어려운 명령들이 있을 수 있으며,<br>이러한 명령을 자주 사용하지 않는다면 큰 무리가 없겠으나,<br>개개인의 업무 스타일에 따라 자주 사용하게 된다면 그때마다 매번 명령들을 어렵게 입력해야 하는 고통을 감내해야 합니다.<br>alias 기능을 이용하면 어떤 명령이든지 명령의 길이가 얼마이든지 상관없이 내가 사용하기 편하게 바꾸어서 사용할 수 있습니다.  </p><p>다만, 그렇게 되면 alias 명령어를 외우게 되어 실제 명령어를 까먹을 수 있으니,<br>alias 설정했다는 것을 잊지 말아야합니다.</p><p>사용자별 alias 가 있고,<br>모든 사용자에 대한 alias 가 존재합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/계정명/.bashrc</span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure><p>보통은 root 에서 작업을 한다고 할 경우에,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/root/.bashrc</span><br></pre></td></tr></table></figure><p>에 alias 를 등록하여 처리하게 됩니다.<br>작업이 완료되면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>를 사용하여 바로 적용하면됩니다.</p>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/10/2018-10-24-alias_setting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>nohup 을 이용해서 서버 실행. pid 로 자동 stop 기능</title>
      <link>https://youngclown.github.io/2018/10/2018-10-23-nohup_jar/</link>
      <guid>https://youngclown.github.io/2018/10/2018-10-23-nohup_jar/</guid>
      <pubDate>Tue, 23 Oct 2018 07:30:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;서버내부에서 helthcheck 서버를 구성할 때 처리할 때,&lt;br&gt;특정폴더에 올라간 jar 파일을 가지고,&lt;br&gt;서버를 실행시키거나, 중지시키는 용도의 shell script 입니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plai
        
      
      </description>
      
      <content:encoded><![CDATA[<p>서버내부에서 helthcheck 서버를 구성할 때 처리할 때,<br>특정폴더에 올라간 jar 파일을 가지고,<br>서버를 실행시키거나, 중지시키는 용도의 shell script 입니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">SERVICE_NAME=healthcheck</span><br><span class="line">PATH_TO_JAR=/home/users/deploy/healthcheck.jar</span><br><span class="line">PID_PATH_NAME=/tmp/healthcheck-pid</span><br><span class="line">case $1 in</span><br><span class="line">    start)</span><br><span class="line">        echo &quot;Starting $SERVICE_NAME ...&quot;</span><br><span class="line">        if [ ! -f $PID_PATH_NAME ]; then</span><br><span class="line">            nohup java -jar $PATH_TO_JAR /tmp 2&gt;&gt; /dev/null &gt;&gt; /dev/null &amp; echo $! &gt; $PID_PATH_NAME</span><br><span class="line">            echo &quot;$SERVICE_NAME started ...&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is already running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    stop)</span><br><span class="line">        if [ -f $PID_PATH_NAME ]; then</span><br><span class="line">            PID=$(cat $PID_PATH_NAME);</span><br><span class="line">            echo &quot;$SERVICE_NAME stoping ...&quot;</span><br><span class="line">            kill $PID;</span><br><span class="line">            echo &quot;$SERVICE_NAME stopped ...&quot;</span><br><span class="line">            rm $PID_PATH_NAME</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is not running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>start 할 때, pid 를 특정 파일에 저장하며, stop 할때 해당 pid를 kill 합니다.<br>자주 사용하는 기능으로,<br>pid를 저장함으로써 다시 실행하거나 중지할때 해당 파일을 kill 합니다.</p><p>이 스크립트의 문제는 별도의 서비스를 통해, 프로세스가 kill 되었을 때, 혹은<br>pid 파일이 삭제되면, stop을 하더라도 프로세스가 종료가 안될 수 있습니다.</p><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/10/2018-10-23-nohup_jar/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java 8의 stream을 이용한 List 중복제거</title>
      <link>https://youngclown.github.io/2018/10/2018-10-16-lamda02/</link>
      <guid>https://youngclown.github.io/2018/10/2018-10-16-lamda02/</guid>
      <pubDate>Tue, 16 Oct 2018 06:38:09 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Friend 라는 모델의 배열 형태에서 friend_id 를 중복을 제거해서 가져오고자&lt;/p&gt;
&lt;h2 id=&quot;기존코드&quot;&gt;&lt;a href=&quot;#기존코드&quot; class=&quot;headerlink&quot; title=&quot;기존코드&quot;&gt;&lt;/a&gt;기존코드&lt;/h2&gt;&lt;figure c
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Friend 라는 모델의 배열 형태에서 friend_id 를 중복을 제거해서 가져오고자</p><h2 id="기존코드"><a href="#기존코드" class="headerlink" title="기존코드"></a>기존코드</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; userIdList = new ArrayList&lt;String&gt;();</span><br><span class="line">for(Friend friend : insertList) &#123;</span><br><span class="line">   boolean isExist = false;</span><br><span class="line">   if (friend != null) &#123;</span><br><span class="line">      for(String user_id : userIdList) &#123;</span><br><span class="line">         if(friend.getUser_id().equals(user_id)) &#123;</span><br><span class="line">            isExist = true;         </span><br><span class="line">            break;      </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if(isExist == false) userIdList.add(friend.getUser_id());</span><br><span class="line">   &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="자바8-stream-사용"><a href="#자바8-stream-사용" class="headerlink" title="자바8 stream 사용"></a>자바8 stream 사용</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; userIdList = insertList.stream().map(Friend::getUser_id).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><hr><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="http://sexydynamite.blogspot.com/2015/02/java-8-stream-list.html" rel="external nofollow noopener noreferrer" target="_blank">Java 8의 stream을 이용한 List 중복제거</a></li></ul>]]></content:encoded>
      
      <comments>https://youngclown.github.io/2018/10/2018-10-16-lamda02/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
